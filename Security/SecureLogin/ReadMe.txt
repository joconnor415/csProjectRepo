Assignment:
Secure website for multiple users
Design and implement a server (website) for multiple users in this step. You may design the login protocol and the cookie content in any way you wish, as long as your website satisfies the following requirements.
	•	A new user can create an account.
	•	Once a user logs in successfully, show a private webpage that has personalized content for this user.
	•	The user needs to login once, and then can browse private pages repeatedly without providing login credentials
	•	Once the user logs out or closes a web browser, the user cannot revisit the private pages without providing login credentials.
	•	A passive attacker, who can sniff the packets in the same subnetwork as the user is in, cannot impersonate the user to the server. (If the attacker can see the private page for the user, we conclude that the attacker impersonated the user successfully.)


I wrote this secure login using Javascript for the client, PHP for the server, and a MySQL database. I created a table of users with username, password, and timestamp fields. Database.php makes the connection to the database and has some functions to run some queries for selecting and inserting. If the user does not have an account they must go to the register.php and register, they will register by entering their username and password. After the user clicks on the submit button, register.js will check if the password equals the confirmed password. If it does it will hash the password with the sha1 hashing algorithm and encrypt the timestamp and the hashed password with the server's public key and send the username, timestamp and the encrypted timestamp and hashed password to the server. When the server receives it, it will decrypt the timestamp and hashed password and compare if the timestamp equals the plaintext of the timestamp, if it does, it will store the user's username, hashed password, and timestamp in the database. It will then redirect to the login page and the user can input the username and password to the login. After the user clicks the submit button, login.js will encrypt the timestamp and hashed password, and send the username timestamp and encrypted timestamp and hashed password to the server. When the server receives it, the server will decrypt the timestamp and hashed password and then compare the decrypted timestamp with the plaintext timestamp. It will also make sure the decrypted hashed password matches the users password in the database. If the timestamp matches and the password matches, and also the if the timestamp is greater than the timestamp stored in the database, the server will set the cookie for the client. The cookie will have the signature of the hashed session id + username. The client will send the cookie to gain access to the private page. If the cookie is valid, the server will return the private page, which contains the welcome message of the current login user. Also the private page will allow the user to logout.